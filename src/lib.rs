use biscuit_auth as biscuit;
use hex;
use pyo3::prelude::*;
use pyo3::types::*;

use pyo3::create_exception;

create_exception!(biscuit_auth, DataLogError, pyo3::exceptions::PyException);
create_exception!(biscuit_auth, AuthorizationError, pyo3::exceptions::PyException);
create_exception!(biscuit_auth, BiscuitBuildError, pyo3::exceptions::PyException);

#[pyclass]
pub struct BiscuitBuilder {
    facts: Vec<biscuit::builder::Fact>,
    rules: Vec<biscuit::builder::Rule>,
    checks: Vec<biscuit::builder::Check>,
}

#[pymethods]
impl BiscuitBuilder {

    #[new]
    fn new() -> BiscuitBuilder {
        BiscuitBuilder {
            facts: Vec::new(),
            rules: Vec::new(),
            checks: Vec::new(),
        }
    }

    pub fn build(&self, root: &KeyPair) -> PyResult<Biscuit> {
        let mut builder = biscuit::Biscuit::builder(&root.0);

        for fact in &self.facts {
            builder.add_authority_fact(fact.clone()).unwrap();
        }
        for rule in &self.rules {
            builder.add_authority_rule(rule.clone()).unwrap();
        }
        for check in &self.checks {
            builder.add_authority_check(check.clone()).unwrap();
        }

        match builder.build() {
            Ok(biscuit) => Ok(Biscuit(biscuit)),
            Err(error) => Err(BiscuitBuildError::new_err(error.to_string()))
        }
    }

    /// Adds a Datalog fact
    pub fn add_authority_fact(&mut self, fact: &str) -> PyResult<()> {
        match fact.try_into() {
            Ok(fact) => Ok(self.facts.push(fact)),
            Err(error) => Err(DataLogError::new_err(error.to_string())),
        }
    }

    /// Adds a Datalog rule
    pub fn add_authority_rule(&mut self, rule: &str) -> PyResult<()> {
        match rule.try_into() {
            Ok(rule) => Ok(self.rules.push(rule)),
            Err(error) => Err(DataLogError::new_err(error.to_string())),
        }
    }

    /// Adds a check
    ///
    /// All checks, from authorizer and token, must be validated to authorize the request
    pub fn add_authority_check(&mut self, check: &str) -> PyResult<()> {
        match check.try_into() {
            Ok(check) => Ok(self.checks.push(check)),
            Err(error) => Err(DataLogError::new_err(error.to_string())),
        }
    }
}

#[pyclass]
pub struct Biscuit(biscuit::Biscuit);

#[pymethods]
impl Biscuit {
    /// Creates a BiscuitBuilder
    ///
    /// the builder can then create a new token with a root key
    #[staticmethod]
    pub fn builder() -> BiscuitBuilder {
        BiscuitBuilder::new()
    }

    /// Creates a BlockBuilder to prepare for attenuation
    ///
    /// the bulder can then be given to the token's append method to create an attenuated token
    pub fn create_block(&self) -> BlockBuilder {
        BlockBuilder(self.0.create_block())
    }

    /// Creates an attenuated token by adding the block generated by the BlockBuilder
    pub fn append(&self, block: BlockBuilder) -> PyResult<Biscuit> {
        match self.0.append(block.0) {
            Ok(biscuit) => Ok(Biscuit(biscuit)),
            Err(error) => Err(BiscuitBuildError::new_err(error.to_string()))
        }
    }

    /// Creates an authorizer from the token
    pub fn authorizer(&self) -> Authorizer {
        Authorizer {
            token: Some(self.0.clone()),
            ..Authorizer::default()
        }
    }

    /// Seals the token
    ///
    /// A sealed token cannot be attenuated
    pub fn seal(&self) -> Biscuit {
        Biscuit(
            self.0
                .seal().unwrap(),
        )
    }

    /// Deserializes a token from raw data
    ///
    /// This will check the signature using the root key
    #[classmethod]
    pub fn from_bytes(_: &PyType, data: &[u8], root: &PublicKey) -> Biscuit {
        Biscuit(
            biscuit::Biscuit::from(data, |_| root.0).unwrap(),
        )
    }

    /// Deserializes a token from URL safe base 64 data
    ///
    /// This will check the signature using the root key
    /// 
    #[classmethod]
    pub fn from_base64(_: &PyType, data: &[u8], root: &PublicKey) -> Biscuit {
        Biscuit(
            biscuit::Biscuit::from_base64(data, |_| root.0).unwrap(),
        )
    }

    /// Serializes to raw data
    pub fn to_bytes(&self) -> Vec<u8> {
        self.0.to_vec().unwrap()
    }

    /// Serializes to URL safe base 64 data
    pub fn to_base64(&self) -> String {
        self.0.to_base64().unwrap()
    }

    // TODO Revocation IDs

    /// Returns the number of blocks in the token
    pub fn block_count(&self) -> usize {
        self.0.block_count()
    }

    /// Prints a block's content as Datalog code
    pub fn block_source(&self, index: usize) -> Option<String> {
        self.0.print_block_source(index)
    }

    fn __repr__(&self) -> String {
        self.0.print()
    }
}

/// The Authorizer verifies a request according to its policies and the provided token
#[pyclass]
#[derive(Default)]
pub struct Authorizer {
    token: Option<biscuit::Biscuit>,
    facts: Vec<biscuit::builder::Fact>,
    rules: Vec<biscuit::builder::Rule>,
    checks: Vec<biscuit::builder::Check>,
    policies: Vec<biscuit::builder::Policy>,
}

#[pymethods]
impl Authorizer {
    #[new]
    pub fn new() -> Authorizer {
        Authorizer::default()
    }

    /// Adds a Datalog fact
    pub fn add_fact(&mut self, fact: &str) -> PyResult<()> {
        let fact = fact.try_into();
        match fact {
            Ok(fact) => Ok(self.facts.push(fact)),
            Err(error) => Err(DataLogError::new_err(error.to_string())),
        }
    }

    /// Adds a Datalog rule
    pub fn add_rule(&mut self, rule: &str) -> PyResult<()> {
        let rule = rule.try_into();
        match rule {
            Ok(rule) => Ok(self.rules.push(rule)),
            Err(error) => Err(DataLogError::new_err(error.to_string())),
        }
    }

    /// Adds a check
    ///
    /// All checks, from authorizer and token, must be validated to authorize the request
    pub fn add_check(&mut self, check: &str) -> PyResult<()> {
        let check = check.try_into();
        match check {
            Ok(check) => Ok(self.checks.push(check)),
            Err(error) => Err(DataLogError::new_err(error.to_string())),
        }
    }

    /// Adds a policy
    ///
    /// The authorizer will test all policies in order of addition and stop at the first one that
    /// matches. If it is a "deny" policy, the request fails, while with an "allow" policy, it will
    /// succeed
    pub fn add_policy(&mut self, policy: &str) -> PyResult<()> {
        let policy = policy.try_into();
        match policy {
            Ok(policy) => Ok(self.policies.push(policy)),
            Err(error) => Err(DataLogError::new_err(error.to_string())),
        }
    }

    /// Adds facts, rules, checks and policies as one code block
    pub fn add_code(&mut self, source: &str) -> PyResult<()> {
        let source_result = match biscuit::parser::parse_source(source) {
            Ok(source_result) => source_result,
            // TODO: this is a bad error message
            Err(_) => return Err(DataLogError::new_err("Failed to load datalog code")),
        };

        for (_, fact) in source_result.facts.into_iter() {
            self.facts.push(fact);
        }

        for (_, rule) in source_result.rules.into_iter() {
            self.rules.push(rule);
        }

        for (_, check) in source_result.checks.into_iter() {
            self.checks.push(check);
        }

        for (_, policy) in source_result.policies.into_iter() {
            self.policies.push(policy);
        }

        Ok(())
    }

    /// Runs the authorization checks and policies
    ///
    /// Returns the index of the matching allow policy, or an error containing the matching deny
    /// policy or a list of the failing checks
    pub fn authorize(&self) -> PyResult<usize> {
        let mut authorizer = match &self.token {
            Some(token) => token
                .authorizer().unwrap(),
            None => biscuit::Authorizer::new().unwrap(),
        };

        for fact in self.facts.iter() {
            authorizer.add_fact(fact.clone()).unwrap();
        }
        for rule in self.rules.iter() {
            authorizer
                .add_rule(rule.clone()).unwrap();
        }
        for check in self.checks.iter() {
            authorizer
                .add_check(check.clone()).unwrap();
        }
        for policy in self.policies.iter() {
            authorizer
                .add_policy(policy.clone()).unwrap();
        }

        match authorizer.authorize() {
            Ok(policy_index) => Ok(policy_index),
            // TODO Better error message
            Err(_) => Err(AuthorizationError::new_err("Not Authorized"))
        }
    }
}

/// Creates a block to attenuate a token
#[pyclass]
#[derive(Clone)]
pub struct BlockBuilder(biscuit::builder::BlockBuilder);

#[pymethods]
impl BlockBuilder {
    /// Adds a Datalog fact
    pub fn add_fact(&mut self, fact: &str) -> Option<()> {
        self.0.add_fact(fact).unwrap();
        None
    }

    /// Adds a Datalog rule
    pub fn add_rule(&mut self, rule: &str) ->  Option<()> {
        self.0.add_rule(rule).unwrap();
        None
    }

    /// Adds a check
    ///
    /// All checks, from authorizer and token, must be validated to authorize the request
    pub fn add_check(&mut self, check: &str) -> Option<()> {
        self.0.add_check(check).unwrap();
        None
    }

    /// Adds facts, rules, checks and policies as one code block
    pub fn add_code(&mut self, source: &str) -> Option<()> {
        self.0.add_code(source).unwrap();
        None
    }
}

#[pyclass]
pub struct KeyPair(biscuit::KeyPair);

#[pymethods]
impl KeyPair {
    #[new]
    pub fn new() -> KeyPair {
        KeyPair(biscuit::KeyPair::new())
    }

    #[getter]
    pub fn public_key(&self) -> PublicKey {
        PublicKey(self.0.public())
    }

    #[getter]
    pub fn private_key(&self) -> PrivateKey {
        PrivateKey(self.0.private())
    }
}

/// Public key
#[pyclass]
pub struct PublicKey(biscuit::PublicKey);

#[pymethods]
impl PublicKey {
    /// Serializes a public key to raw bytes
    pub fn to_bytes(&self) -> [u8; 32] {
        self.0.to_bytes()
    }

    /// Serializes a public key to a hexadecimal string
    pub fn to_hex(&self) -> String {
        hex::encode(&self.0.to_bytes())
    }

    /// Deserializes a public key from raw bytes
    #[classmethod]
    pub fn from_bytes(_: &PyType, data: &[u8]) -> PyResult<PublicKey> {
        match biscuit::PublicKey::from_bytes(data) {
            Ok(key) => Ok(PublicKey(key)),
            Err(error) => Err(AuthorizationError::new_err(error.to_string())),
        }
    }

    /// Deserializes a public key from a hexadecimal string
    #[classmethod]
    pub fn from_hex(_: &PyType, data: &str) -> PyResult<PublicKey> {
        let data = hex::decode(data).unwrap();
        let key = biscuit::PublicKey::from_bytes(&data).unwrap();
        Ok(PublicKey(key))
    }
}

#[pyclass]
pub struct PrivateKey(biscuit::PrivateKey);

#[pymethods]
impl PrivateKey {
    /// Serializes a private key to raw bytes
    pub fn to_bytes(&self) -> [u8; 32] {
        self.0.to_bytes()
    }

    /// Serializes a private key to a hexadecimal string
    pub fn to_hex(&self) -> String {
        hex::encode(&self.0.to_bytes())
    }

    /// Deserializes a private key from raw bytes
    #[classmethod]
    pub fn from_bytes(_: &PyType, data: &[u8]) -> PyResult<PrivateKey> {
        let key = biscuit::PrivateKey::from_bytes(data).unwrap();
        return Ok(PrivateKey(key));
    }

    /// Deserializes a private key from a hexadecimal string
    #[classmethod]
    pub fn from_hex(_: &PyType, data: &str) -> PyResult<PrivateKey> {
        let data = hex::decode(data).unwrap();
        let key = biscuit::PrivateKey::from_bytes(&data).unwrap();
        Ok(PrivateKey(key))
    }
}

/// A Python module implemented in Rust. The name of this function must match
/// the `lib.name` setting in the `Cargo.toml`, else Python will not be able to
/// import the module.
#[pymodule]
fn biscuit_auth(py: Python, m: &PyModule) -> PyResult<()> {
    m.add_class::<KeyPair>()?;
    m.add_class::<PublicKey>()?;
    m.add_class::<PrivateKey>()?;
    m.add_class::<Biscuit>()?;
    m.add_class::<BiscuitBuilder>()?;
    m.add_class::<BlockBuilder>()?;

    m.add("DataLogError", py.get_type::<DataLogError>())?;
    m.add("AuthorizationError", py.get_type::<AuthorizationError>())?;
    m.add("BiscuitBuildError", py.get_type::<BiscuitBuildError>())?;

    Ok(())
}